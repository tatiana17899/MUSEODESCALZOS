@using MUSEO_DE_LOS_DESCALZOS.ViewModel
@model EventoViewModel

@{
    ViewData["Title"] = "Lista de Eventos";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<link rel="stylesheet" href="https://cdn.datatables.net/2.1.6/css/dataTables.dataTables.min.css" />

<div class="content flex-grow-1" id="contenido">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">@ViewData["Title"]</h1>
        <hr>
    </div>
    <div class="card">
        <div class="card-header">
            <h5 class="card-title d-flex align-items-center">
                <i class="fa-sharp fa-solid fa-person"></i> Historial de Eventos
            </h5>
        </div>
        <div class="card-body">
            <!-- Botón para abrir el modal de crear nuevo evento -->
            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#modal1" id="btnCrear">
                Crear Nuevo Evento
            </button>
            <hr>
            <div class="container">
                <table id="eventoTable" class="table table-striped table-bordered" style="padding: 10px;">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Descripción</th>
                            <th>Fecha</th>
                            <th>Precio</th>
                            <th>Capacidad</th>
                            <th>Imagen</th>
                            <td>Acciones</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var evento in Model.ListEvento)
                        {
                            <tr>
                                <td>@evento.Nombre</td>
                                <td>@evento.Descripción</td>
                                <td>@evento.Fecha</td>
                                <td>@evento.Precio</td>
                                <td>@evento.Capacidad</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(evento.RutalImagen))
                                    {
                                        <img src="@evento.RutalImagen" alt="@evento.Nombre" style="width:100px;height:auto;" />
                                    }
                                    else
                                    {
                                        <span>No disponible</span>
                                    }
                                </td>
                                <td>
                                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#modal1" onclick="editEvento('@evento.IDEvento')">
                                        <i class="fa-solid fa-pencil"></i>
                                    </button>
                                    <form asp-action="Eliminar" asp-controller="EventoAdmin" method="post" style="display:inline;">
                                        <input type="hidden" name="id" value="@evento.IDEvento" />
                                        <button type="button" class="btn btn-danger btn-sm" onclick="confirmarEliminacion('@evento.IDEvento')">
                                            <i class="fa-solid fa-trash"></i>
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Modal 1: Información Básica -->
    <div class="modal fade" id="modal1" tabindex="-1" aria-labelledby="modal1Label" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modal1Label">Información Básica</h5>
                </div>
                <div class="modal-body">
                    <form id="formEvento" enctype="multipart/form-data">
                        <input type="hidden" asp-for="FormEvento.IDEvento" id="IDEvento" />

                        <div class="mb-4">
                            <label asp-for="FormEvento.Nombre">Nombre</label>
                            <input type="text" class="form-control" id="nombre"  asp-for="FormEvento.Nombre" required>
                        </div>
                        <div class="mb-4">
                            <label asp-for="FormEvento.Descripción">Descripción</label>
                            <input type="text" class="form-control" id="descripcion"  asp-for="FormEvento.Descripción" required>
                        </div>
                        <div class="mb-4">
                            <label asp-for="FormEvento.Capacidad">Capacidad</label>
                            <input type="number" class="form-control" id="capacidad"  asp-for="FormEvento.Capacidad" required>
                        </div>
                        <div class="mb-4">
                            <label asp-for="FormEvento.Precio">Precio</label>
                            <input type="number" class="form-control" id="precio"  asp-for="FormEvento.Precio" required>
                        </div>
                        <div class="mb-4">
                            <label asp-for="FormEvento.Fecha">Fecha</label>
                            <input type="date" class="form-control" id="fecha"  asp-for="FormEvento.Fecha" required>
                        </div>
                        <div class="mb-4">
                            <label asp-for="FormEvento.ImagenFile" class="block text-gray-700">Imagen</label>
                            <input type="file" id="imagen" class="w-full border border-gray-300 rounded p-2" asp-for="FormEvento.ImagenFile">
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                            <button type="button" class="btn btn-primary" onclick="abrirModal2()">Siguiente</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal 2: Detalles Adicionales -->
    <div class="modal fade" id="modal2" tabindex="-1" aria-labelledby="modal2Label" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modal2Label">Registrar Actividades</h5>
                </div>
                <div class="modal-body">
                    <div class="mb-4">
                        <label>Nombre Actividad</label>
                        <input type="text" id="nombreActividad" class="form-control" required>
                    </div>
                    <div class="mb-4">
                        <label>Hora Inicio</label>
                        <input type="time" id="horaInicio" class="form-control" required>
                    </div>
                    <div class="mb-4">
                        <label>Hora Final</label>
                        <input type="time" id="horaFin" class="form-control" required>
                    </div>
                    <div class="mb-4">
                        <select id="spinnerGuia" class="w-full border border-gray-300 rounded p-2" required>
                            <option value="">Seleccionar un Guía</option>
                            @foreach (var guia in Model.ListGuia)
                            {
                                <option value="@guia.IDGuía">@guia.Nombres @guia.Apellidos</option>
                            }
                        </select>
                    </div>
                        <button type="button" class="btn btn-primary" onclick="agregarActividad()">Agregar Actividad</button>

                    <!-- Tabla para mostrar las actividades -->
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Nombre Actividad</th>
                                <th>Hora Inicio</th>
                                <th>Hora Final</th>
                                <th>Guía</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="tablaActividades">
                            <!-- Las actividades se agregarán aquí -->
                        </tbody>
                    </table>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" onclick="abrirModal1()">Atras</button>
                        <button type="button" class="btn btn-primary" id="btnGuardar" onclick="guardarEvento()">Guardar Evento</button>
                    </div>
                </div>
            </div>
        </div>
    </div>


    @section scripts {
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.datatables.net/2.1.5/js/dataTables.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script>
            $(document).ready(function () {
                $('#eventoTable').DataTable({
                    responsive: true,
                    autoWidth: false,
                    lengthMenu: [3, 5, 7, 9],
                    pageLength: 5
                });

                window.editEvento = function (idEvento) {
                    $.ajax({
                        url: '@Url.Action("GetEventoById", "EventoAdmin")',
                        type: 'GET',
                        data: { id: idEvento },
                        success: function (data) {
                            console.log(data)
                            $('#IDEvento').val(data.formEvento.idEvento); // Cambiado a minúsculas
                            $('#nombre').val(data.formEvento.nombre); // Cambiado a minúsculas
                            $('#descripcion').val(data.formEvento.descripción); // Cambiado a minúsculas
                            $('#capacidad').val(data.formEvento.capacidad); // Cambiado a minúsculas
                            $('#precio').val(data.formEvento.precio); // Cambiado a minúsculas
                            $('#fecha').val(data.formEvento.fecha.substring(0, 10)); // Cambiado a minúsculas

                            // Limpia la tabla de actividades antes de agregar nuevas
                            $('#tablaActividades').empty();

                            // Rellena la tabla con las actividades existentes
                            data.listActividades.forEach(function (actividad) {
                                $('#tablaActividades').append(`
                                    <tr>
                                        <td>${actividad.actividad}</td> // Cambiado a minúsculas
                                        <td>${actividad.hora_Inicial.substring(11, 16)}</td> // Extrae las horas (HH:mm)
                                        <td>${actividad.hora_Final.substring(11, 16)}</td> // Extrae las horas (HH:mm)
                                        <td>${actividad.guía.nombres} ${actividad.guía.apellidos}</td> // Cambiado a minúsculas
                                        <td><button type="button" class="btn btn-danger" onclick="eliminarActividad(this)">Eliminar</button></td>
                                    </tr>

                                `);
                                // Agregar la actividad al array
                                actividades.push({
                                    nombre: actividad.actividad,
                                    horaInicio: actividad.hora_Inicial.substring(11, 16),
                                    horaFin: actividad.hora_Final.substring(11, 16),
                                    guia: actividad.guía.idGuía // Asegúrate de usar el ID o el dato que necesites
                                });
                            });
                            

                            $('#myModalLabel').text('Editar Evento');
                            $('#modal1').modal('show'); // Muestra el modal
                        },
                        error: function (xhr, status, error) {
                            Swal.fire({
                                title: "Error",
                                text: "Hubo un error al obtener los datos del evento.",
                                icon: "error"
                            });
                            console.log(error);
                        }
                    });
                }



                $('#btnCrear').click(function () {
                    $('#IDEvento').val(0);
                    $('#nombre').val('');
                    $('#descripción').val('');
                    $('#capacidad').val('');
                    $('#precio').val('');
                    //$('#RutalImagen').val('');
                    $('#fecha').val('');
                    $('#myModalLabel').text('Crear Evento');
                });
            });

            function abrirModal2() {
                $('#modal1').modal('hide'); // Cierra la primera modal
                $('#modal2').modal('show'); // Abre la segunda modal
            }            
            function abrirModal1() {
                $('#modal1').modal('show'); // Cierra la primera modal
                $('#modal2').modal('hide'); // Abre la segunda modal
            }

            function guardarEvento() {
                const form = $('#formEvento')[0];
                const formData = new FormData(form);

                // Agregar las actividades al FormData
                actividades.forEach((actividad, index) => {
                    formData.append(`ListActividades[${index}].Actividad`, actividad.nombre);
                    formData.append(`ListActividades[${index}].Hora_Inicial`, actividad.horaInicio);
                    formData.append(`ListActividades[${index}].Hora_Final`, actividad.horaFin);
                    formData.append(`ListActividades[${index}].Guía.IDGuía`, actividad.guia); // Si el campo en el modelo se llama Guia
                });

                $.ajax({
                    url: '@Url.Action("Guardar", "EventoAdmin")',
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        Swal.fire({
                            title: "Éxito",
                            text: "Evento guardado correctamente.",
                            icon: "success"
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            title: "Error",
                            text: "Hubo un error al guardar el evento.",
                            icon: "error"
                        });
                        console.log(error);
                    }
                });
            }


            function confirmarEliminacion(id) {
                Swal.fire({
                    title: '¿Estás seguro?',
                    text: "No podrás revertir esto.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Sí, eliminar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '@Url.Action("Eliminar", "EventoAdmin")',
                            type: 'POST',
                            data: { id: id },
                            success: function (response) {
                                Swal.fire(
                                    'Eliminado!',
                                    'El evento ha sido eliminado.',
                                    'success'
                                ).then(() => {
                                    location.reload();
                                });
                            },
                            error: function (xhr, status, error) {
                                Swal.fire({
                                    title: "Error",
                                    text: "Hubo un error al eliminar el evento.",
                                    icon: "error"
                                });
                                console.log(error);
                            }
                        });
                    }
                });
            }


            // Arreglo para almacenar las actividades
            let actividades = [];

            // Función para agregar actividad
            function agregarActividad() {
                const nombreActividad = document.getElementById('nombreActividad').value;
                const horaInicio = document.getElementById('horaInicio').value;
                const horaFin = document.getElementById('horaFin').value;
                const guia = document.getElementById('spinnerGuia').value;

                // Validar que los campos no estén vacíos
                if (!nombreActividad || !horaInicio || !horaFin || !guia) {
                    alert('Por favor, completa todos los campos.');
                    return;
                }

                // Crear objeto de actividad
                const actividad = {
                    nombre: nombreActividad,
                    horaInicio: horaInicio,
                    horaFin: horaFin,
                    guia: guia,
                };

                // Agregar actividad al arreglo
                actividades.push(actividad);

                // Limpiar los campos del formulario
                document.getElementById('nombreActividad').value = '';
                document.getElementById('horaInicio').value = '';
                document.getElementById('horaFin').value = '';
                document.getElementById('spinnerGuia').value = '';

                // Mostrar actividades en la tabla
                mostrarActividades();
            }

            // Función para mostrar actividades en la tabla
           function mostrarActividades() {
                const tablaActividades = document.getElementById('tablaActividades');
                tablaActividades.innerHTML = ''; // Limpiar tabla
                const guiaArray = @Html.Raw(Json.Serialize(Model.ListGuia)); // Asegúrate de que este modelo se serialice correctamente
                console.log(guiaArray);
                actividades.forEach((actividad, index) => {
                    const fila = document.createElement('tr');
                    console.log(actividad)
                    // Buscar el nombre del guía correspondiente al ID en la actividad
                    const guia = guiaArray.find(g => g.idGuía == actividad.guia); // Cambia `idGuia` si es necesario
                    const guiaNombre = guia ? `${guia.nombres} ${guia.apellidos}` : 'No asignado'; // Manejo de caso en que no se encuentra el guía

                    fila.innerHTML = `
                        <td>${actividad.nombre}</td>
                        <td>${actividad.horaInicio}</td>
                        <td>${actividad.horaFin}</td>
                        <td>${guiaNombre}</td> <!-- Mostrar nombre del guía -->
                        <td>
                            <button class="btn btn-danger btn-sm" onclick="eliminarActividad(${index})">Eliminar</button>
                        </td>
                    `;

                    tablaActividades.appendChild(fila);
                });
            }


            // Función para eliminar actividad
            function eliminarActividad(index) {
                actividades.splice(index, 1); // Eliminar la actividad del arreglo
                mostrarActividades(); // Actualizar la tabla
            }

        </script>
    }
</div>
